# Snockets

A JavaScript/CoffeeScript concatenation tool for Node.js inspired by [Sprockets](https://github.com/sstephenson/sprockets). Used by [connect-assets](http://github.com/TrevorBurnham/connect-assets) to create a Rails 3.1-style asset pipeline.

Written in CoffeeScript by the author of [CoffeeScript: Accelerated JavaScript Development](http://pragprog.com/book/tbcoffee/coffeescript).

## Usage (script-side)

In your CoffeeScript files, write Sprockets-style comments to indicate dependencies, e.g.

    #= require dependency

(or `//= require dependency` in JavaScript). If you want to bring in a whole folder of scripts, use

    #= require_tree dir

## Usage (Node-side)

First,

    npm install snockets

Then in your app:

    Snockets = require 'snockets'
    snockets = new Snockets()

Each `Snockets` instance has a `depGraph` property, an instance of [dep-graph](https://github.com/TrevorBurnham/dep-graph). You can `scan` a file to just update the dependency graph:

    snockets.scan 'dir/foo.coffee', (err, depGraph) -> ...

To get a list of filenames showing the series of dependencies the scanned file has, you'd use `depGraph.getChain 'dir/foo.coffee'`.

You can get a list of compiled JavaScripts corresponding to the dependency chain (starting from the first required file to the requested file) using `getCompiledChain`:

    snockets.getCompiledChain 'dir/foo.coffee', (err, jsList) -> ...

The result is in the format `[{filename: "dependency1.js", js: "// code"}, ...]`. Note that those JavaScript files are not actually created by `getCompiledChain`.

Snockets can also provide a single compiled, concatenated file (optionally run through [UglifyJS](https://github.com/mishoo/UglifyJS) if the `minify` option is passed in):

    snockets.getConcatenation 'dir/foo.coffee', minify: true, (err, js) -> ...

Note that you don't need to `scan` before or after running `getCompiledChain` or `getConcatenation`; they update the dependency graph the same way that `scan` does.

## Synchronous mode

By default, Snockets uses only async file methods. You can pass the option `async: false` to either of its methods if you want it to be synchronous instead. In synchronous mode, you can use either callbacks or return values, e.g.

    js = snockets.getConcatenation 'dir/foo.coffee', async: false

## License

Â©2011 Trevor Burnham and available under the [MIT license](http://www.opensource.org/licenses/mit-license.php):

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.